import sys
import os
import json
from datetime import datetime

from PyQt6.QtWebEngineWidgets import QWebEngineView
from PyQt6.QtWebEngineCore import QWebEngineProfile, QWebEnginePage, QWebEngineDownloadRequest
from PyQt6.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, 
                             QWidget, QLineEdit, QToolBar, 
                             QPushButton, QTabWidget)
from PyQt6.QtCore import QUrl

class DataManager:
    def __init__(self):
        self.data_path = os.path.join(os.path.expanduser("~"), ".securebrowser", "data")
        os.makedirs(self.data_path, exist_ok=True)
        
    def save_bookmarks(self, bookmarks):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–æ–∫"""
        with open(os.path.join(self.data_path, "bookmarks.json"), 'w', encoding='utf-8') as f:
            json.dump(bookmarks, f, ensure_ascii=False, indent=2)
            
    def load_bookmarks(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–ª–∞–¥–æ–∫"""
        try:
            with open(os.path.join(self.data_path, "bookmarks.json"), 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return []
    
    def save_history(self, history):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ)"""
        # –ü—Ä–æ—Å—Ç–æ–µ XOR-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        encrypted = [self.simple_encrypt(str(item)) for item in history]
        with open(os.path.join(self.data_path, "history.enc"), 'w') as f:
            f.write('\n'.join(encrypted))
    
    def simple_encrypt(self, text):
        """–ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"""
        return ''.join(chr(ord(c) ^ 0x55) for c in text)

class OfflinePageManager:
    def __init__(self):
        self.offline_path = os.path.join(os.path.expanduser("~"), ".securebrowser", "offline")
        os.makedirs(self.offline_path, exist_ok=True)
        
    def add_page(self, url, title):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –æ—Ñ–ª–∞–π–Ω-–∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        metadata = {
            'url': url,
            'title': title,
            'saved_at': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        with open(os.path.join(self.offline_path, 'metadata.json'), 'a') as f:
            f.write(json.dumps(metadata) + '\n')

class SecureBrowser(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("SecureBrowser - –õ–æ–∫–∞–ª—å–Ω—ã–π & –ê–Ω–æ–Ω–∏–º–Ω—ã–π")
        self.setGeometry(500, 150, 800, 600)
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        self.local_profile = self.setup_local_profile()
        self.data_manager = DataManager()
        self.offline_manager = OfflinePageManager()
        
        self.setup_ui()
        self.setup_offline_features()
        self.setup_security_features()
        
    def setup_local_profile(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        profile = QWebEngineProfile("local-profile")
        
        # –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω–æ
        data_path = os.path.join(os.path.expanduser("~"), ".securebrowser")
        os.makedirs(data_path, exist_ok=True)
        
        profile.setPersistentStoragePath(os.path.join(data_path, "storage"))
        profile.setCachePath(os.path.join(data_path, "cache"))
        profile.setDownloadPath(os.path.join(data_path, "downloads"))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        profile.setHttpCacheType(QWebEngineProfile.HttpCacheType.DiskHttpCache)
        profile.setPersistentCookiesPolicy(QWebEngineProfile.PersistentCookiesPolicy.NoPersistentCookies)
        
        return profile
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        widget = QWidget()
        self.setCentralWidget(widget)
        layout = QVBoxLayout(widget)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar = QToolBar()
        self.addToolBar(self.toolbar)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        back_btn = QPushButton("‚Üê")
        forward_btn = QPushButton("‚Üí")
        reload_btn = QPushButton("‚ü≤")
        home_btn = QPushButton("üè†")
        
        # –ê–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.url_bar = QLineEdit()
        self.url_bar.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ø–∞–Ω–µ–ª—å
        self.toolbar.addWidget(back_btn)
        self.toolbar.addWidget(forward_btn)
        self.toolbar.addWidget(reload_btn)
        self.toolbar.addWidget(home_btn)
        self.toolbar.addWidget(self.url_bar)
        
        # –°–∏—Å—Ç–µ–º–∞ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        self.tabs.setTabsClosable(True)
        self.tabs.tabCloseRequested.connect(self.close_tab)
        
        layout.addWidget(self.tabs)
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self.add_new_tab("https://duckduckgo.com", "–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        back_btn.clicked.connect(lambda: self.current_browser().back())
        forward_btn.clicked.connect(lambda: self.current_browser().forward())
        reload_btn.clicked.connect(lambda: self.current_browser().reload())
        home_btn.clicked.connect(self.go_home)
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        
    def add_new_tab(self, url, title="–ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        browser = QWebEngineView()
        web_page = QWebEnginePage(self.local_profile, browser)
        browser.setPage(web_page)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        browser.urlChanged.connect(self.update_url)
        browser.titleChanged.connect(lambda title: self.update_tab_title(browser, title))
        
        index = self.tabs.addTab(browser, title)
        self.tabs.setCurrentIndex(index)
        
        browser.setUrl(QUrl(url))
        
        return browser
    
    def setup_offline_features(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ñ–ª–∞–π–Ω-—Ñ—É–Ω–∫—Ü–∏–π"""
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ–ª–∞–π–Ω
        save_offline_btn = QPushButton("üíæ –û—Ñ–ª–∞–π–Ω")
        self.toolbar.addWidget(save_offline_btn)
        save_offline_btn.clicked.connect(self.save_page_offline)
        
    def save_page_offline(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        browser = self.current_browser()
        current_url = browser.url().toString()
        current_title = browser.title()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        filename = f"{hash(current_url)}.html"
        filepath = os.path.join(self.offline_manager.offline_path, filename)
        
        def save_finished(path):
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {current_url}")
            self.offline_manager.add_page(current_url, current_title)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        browser.page().save(filepath, QWebEngineDownloadRequest.SavePageFormat.CompleteHtmlSaveFormat)
        # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª, 
        # –Ω–æ –≤ –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ
        
    def setup_security_features(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–æ–≤
        self.local_profile.setHttpUserAgent(
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        )
        
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ API, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
        # –í PyQt6 setPermissionPolicy –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–Ω–∞—á–µ

    def current_browser(self):
        """–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä"""
        return self.tabs.currentWidget()

    def close_tab(self, index):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏"""
        if self.tabs.count() > 1:
            self.tabs.removeTab(index)

    def navigate_to_url(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL"""
        url = self.url_bar.text()
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        self.current_browser().setUrl(QUrl(url))

    def update_url(self, q):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.url_bar.setText(q.toString())

    def update_tab_title(self, browser, title):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∫–ª–∞–¥–∫–∏"""
        index = self.tabs.indexOf(browser)
        if title:
            self.tabs.setTabText(index, title[:15] + '...' if len(title) > 15 else title)

    def go_home(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        self.current_browser().setUrl(QUrl("https://duckduckgo.com"))
        
def main():
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setApplicationName("SecureBrowser")
    app.setApplicationVersion("1.0")
    
    window = SecureBrowser()
    window.show()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()